{"version":3,"file":"static/js/563.aad42c12.chunk.js","mappings":"iPAOMA,GAAaC,EAAAA,EAAAA,OAAK,kBAAM,0FAAyC,IA4CvE,UA1CA,WACE,OAA+DC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,UAAU,IAA9FC,EAAoB,EAApBA,qBAAgCC,GAAF,EAARC,SAA4B,EAAlBD,oBAClCE,GAAYN,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMM,KAAKD,SAAS,IACvDE,GAAWC,EAAAA,EAAAA,MACjB,GAAoCC,EAAAA,EAAAA,KAiBpC,OAjBc,EAANC,OAAc,EAANC,OAAe,EAAPC,SAkBtB,SAAC,EAAAC,SAAQ,CAACC,SAAU,KAAK,UACvB,UAAC,IAAM,CACLC,UAAW,SACXH,QAAS,kBAAML,GAASS,EAAAA,EAAAA,IAAyB,CAAEb,oBAAoB,IAAS,EAChFO,OAAQP,EACRc,qBAAqB,EAAM,WAE3B,SAAC,IAAa,CAACC,GAAG,qBAClB,SAAC,IAAa,CAACC,EAAE,MAAMD,GAAG,cAAa,UACrC,SAAC,IAAU,CAACE,EAAE,IAAIC,qBAAsB,KAAMC,oBAAqB,KAAMJ,GAAG,aAAY,UACtF,SAAC,KAAG,CAACK,OAAO,OAAM,UAChB,SAAC1B,EAAU,CAACQ,UAAWA,EAAWmB,aAActB,EAAsBuB,YA5B9D,WAElBlB,GAASS,EAAAA,EAAAA,IAAyB,CAAEb,oBAAoB,KACxDI,GAASmB,EAAAA,EAAAA,IAA2B,CAAEC,GAAI,OAC5C,cA+BF,C","sources":["App3.js"],"sourcesContent":["import { useDisclosure } from '@chakra-ui/hooks'\nimport { Drawer, DrawerBody, DrawerContent, DrawerOverlay } from '@chakra-ui/modal'\nimport React, { lazy, Suspense, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { updateCollectionViewOpen, updateSelectedCollectionId } from './state/collection/reducer'\nimport { Box } from '@chakra-ui/react'\n\nconst Collection = lazy(() => import('./widgets/Collection/collection'))\n\nfunction App() {\n  const { selectedCollectionId, showMint, collectionViewOpen } = useSelector((state) => state.collection)\n  const accessKey = useSelector((state) => state.user.accessKey)\n  const dispatch = useDispatch()\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const closeDrawer = () => {\n    // onClose()\n    dispatch(updateCollectionViewOpen({ collectionViewOpen: false }))\n    dispatch(updateSelectedCollectionId({ id: null }))\n  }\n\n  // useEffect(() => {}, [collectionViewOpen, selectedCollectionId])\n\n  // useEffect(() => {\n  //   if (selectedCollectionId && !showMint && !collectionViewOpen) {\n  //     dispatch(updateCollectionViewOpen({ collectionViewOpen: true }))\n  //     // onOpen()\n  //   }\n  // }, [selectedCollectionId, collectionViewOpen])\n\n  // if (!selectedCollectionId) return null\n  return (\n    <Suspense fallback={null}>\n      <Drawer\n        placement={'bottom'}\n        onClose={() => dispatch(updateCollectionViewOpen({ collectionViewOpen: false }))}\n        isOpen={collectionViewOpen}\n        closeOnOverlayClick={false}\n      >\n        <DrawerOverlay bg=\"rgba(0,0,0,0.8)\" />\n        <DrawerContent h=\"93%\" bg=\"transparent\">\n          <DrawerBody p=\"0\" borderTopRightRadius={'20'} borderTopLeftRadius={'20'} bg=\"background\">\n            <Box height=\"100%\">\n              <Collection accessKey={accessKey} collectionId={selectedCollectionId} closeDrawer={closeDrawer} />\n            </Box>\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </Suspense>\n  )\n}\n\nexport default App\n"],"names":["Collection","lazy","useSelector","state","collection","selectedCollectionId","collectionViewOpen","showMint","accessKey","user","dispatch","useDispatch","useDisclosure","isOpen","onOpen","onClose","Suspense","fallback","placement","updateCollectionViewOpen","closeOnOverlayClick","bg","h","p","borderTopRightRadius","borderTopLeftRadius","height","collectionId","closeDrawer","updateSelectedCollectionId","id"],"sourceRoot":""}